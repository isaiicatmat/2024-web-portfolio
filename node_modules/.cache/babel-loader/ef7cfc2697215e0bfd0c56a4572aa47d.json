{"ast":null,"code":"/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n  const str = num.toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n  return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n  // http://www.w3.org/TR/AERT#color-contrast\n  const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n  return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n  if (!color) {\n    return color;\n  }\n  if (Array.isArray(color)) {\n    return typeof color[0] === 'number' ? [color.slice()] : color;\n  }\n  return [color];\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n  for (let i = 0; i < ignoredColor.length; i++) {\n    if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n  switch (ignoredColor.length) {\n    case 3:\n      // [red, green, blue]\n      if (isIgnoredRGBColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 4:\n      // [red, green, blue, alpha]\n      if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 5:\n      // [red, green, blue, alpha, threshold]\n      if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    default:\n      return false;\n  }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n  // Ignore if the pixel are transparent.\n  if (data[index + 3] !== 255) {\n    return true;\n  }\n  if (data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2]) {\n    return true;\n  }\n  return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n  if (data[index + 3] && ignoredColor[3]) {\n    return data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2] && data[index + 3] === ignoredColor[3];\n  }\n\n  // Ignore rgb components if the pixel are fully transparent.\n  return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n  return colorComponent >= ignoredColorComponent - value && colorComponent <= ignoredColorComponent + value;\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n  const redIgnored = ignoredColor[0];\n  const greenIgnored = ignoredColor[1];\n  const blueIgnored = ignoredColor[2];\n  const alphaIgnored = ignoredColor[3];\n  const threshold = ignoredColor[4];\n  const alphaData = data[index + 3];\n  const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n  if (!alphaIgnored) {\n    return alphaInRange;\n  }\n  if (!alphaData && alphaInRange) {\n    return true;\n  }\n  if (inRange(data[index], redIgnored, threshold) && inRange(data[index + 1], greenIgnored, threshold) && inRange(data[index + 2], blueIgnored, threshold) && alphaInRange) {\n    return true;\n  }\n  return false;\n}\nfunction dominantAlgorithm(arr, len, options) {\n  const colorHash = {};\n  const divider = 24;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n  let max = [0, 0, 0, 0, 0];\n  for (let i = 0; i < len; i += step) {\n    const red = arr[i];\n    const green = arr[i + 1];\n    const blue = arr[i + 2];\n    const alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    const key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);\n    if (colorHash[key]) {\n      colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];\n    } else {\n      colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n    }\n    if (max[4] < colorHash[key][4]) {\n      max = colorHash[key];\n    }\n  }\n  const redTotal = max[0];\n  const greenTotal = max[1];\n  const blueTotal = max[2];\n  const alphaTotal = max[3];\n  const count = max[4];\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction simpleAlgorithm(arr, len, options) {\n  let redTotal = 0;\n  let greenTotal = 0;\n  let blueTotal = 0;\n  let alphaTotal = 0;\n  let count = 0;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n  for (let i = 0; i < len; i += step) {\n    const alpha = arr[i + 3];\n    const red = arr[i] * alpha;\n    const green = arr[i + 1] * alpha;\n    const blue = arr[i + 2] * alpha;\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red;\n    greenTotal += green;\n    blueTotal += blue;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction sqrtAlgorithm(arr, len, options) {\n  let redTotal = 0;\n  let greenTotal = 0;\n  let blueTotal = 0;\n  let alphaTotal = 0;\n  let count = 0;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n  for (let i = 0; i < len; i += step) {\n    const red = arr[i];\n    const green = arr[i + 1];\n    const blue = arr[i + 2];\n    const alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red * red * alpha;\n    greenTotal += green * green * alpha;\n    blueTotal += blue * blue * alpha;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction getDefaultColor(options) {\n  return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n  return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\nfunction isSvg(filename) {\n  return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n  if (resource instanceof HTMLImageElement) {\n    let width = resource.naturalWidth;\n    let height = resource.naturalHeight;\n\n    // For SVG images with only viewBox attr.\n    if (!resource.naturalWidth && isSvg(resource.src)) {\n      width = height = MAX_SIZE;\n    }\n    return {\n      width,\n      height\n    };\n  }\n  if (resource instanceof HTMLVideoElement) {\n    return {\n      width: resource.videoWidth,\n      height: resource.videoHeight\n    };\n  }\n  return {\n    width: resource.width,\n    height: resource.height\n  };\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n  const srcLeft = getOption(options, 'left', 0);\n  const srcTop = getOption(options, 'top', 0);\n  const srcWidth = getOption(options, 'width', originalSize.width);\n  const srcHeight = getOption(options, 'height', originalSize.height);\n  let destWidth = srcWidth;\n  let destHeight = srcHeight;\n  if (options.mode === 'precision') {\n    return {\n      srcLeft,\n      srcTop,\n      srcWidth,\n      srcHeight,\n      destWidth,\n      destHeight\n    };\n  }\n  let factor;\n  if (srcWidth > srcHeight) {\n    factor = srcWidth / srcHeight;\n    destWidth = MAX_SIZE;\n    destHeight = Math.round(destWidth / factor);\n  } else {\n    factor = srcHeight / srcWidth;\n    destHeight = MAX_SIZE;\n    destWidth = Math.round(destHeight / factor);\n  }\n  if (destWidth > srcWidth || destHeight > srcHeight || destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n    destWidth = srcWidth;\n    destHeight = srcHeight;\n  }\n  return {\n    srcLeft,\n    srcTop,\n    srcWidth,\n    srcHeight,\n    destWidth,\n    destHeight\n  };\n}\nfunction makeCanvas() {\n  return typeof window === 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n}\nconst ERROR_PREFIX = 'FastAverageColor: ';\nfunction outputError(options, text, details) {\n  if (!options.silent) {\n    console.error(ERROR_PREFIX + text);\n    if (details) {\n      console.error(details);\n    }\n  }\n}\nfunction getError(text) {\n  return Error(ERROR_PREFIX + text);\n}\nclass FastAverageColor {\n  /**\n   * Get asynchronously the average color from not loaded image.\n   *\n   * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n   * @param {FastAverageColorOptions} [options]\n   *\n   * @returns {Promise<FastAverageColorOptions>}\n   */\n  getColorAsync(resource, options) {\n    if (!resource) {\n      return Promise.reject(getError('call .getColorAsync() without resource.'));\n    }\n    if (typeof resource === 'string') {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = resource;\n      return this._bindImageEvents(img, options);\n    } else if (resource instanceof Image && !resource.complete) {\n      return this._bindImageEvents(resource, options);\n    } else {\n      const result = this.getColor(resource, options);\n      return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n    }\n  }\n\n  /**\n   * Get the average color from images, videos and canvas.\n   *\n   * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n   * @param {FastAverageColorOptions} [options]\n   *\n   * @returns {FastAverageColorResult}\n   */\n  getColor(resource, options) {\n    options = options || {};\n    const defaultColor = getDefaultColor(options);\n    if (!resource) {\n      outputError(options, 'call .getColor(null) without resource.');\n      return this.prepareResult(defaultColor);\n    }\n    const originalSize = getOriginalSize(resource);\n    const size = prepareSizeAndPosition(originalSize, options);\n    if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n      outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n      return this.prepareResult(defaultColor);\n    }\n    if (!this._ctx) {\n      this._canvas = makeCanvas();\n      this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n      if (!this._ctx) {\n        outputError(options, 'Canvas Context 2D is not supported in this browser.');\n        return this.prepareResult(defaultColor);\n      }\n    }\n    this._canvas.width = size.destWidth;\n    this._canvas.height = size.destHeight;\n    let value = defaultColor;\n    try {\n      this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n      this._ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n      const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n      value = this.getColorFromArray4(bitmapData, options);\n    } catch (e) {\n      outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n    }\n    return this.prepareResult(value);\n  }\n\n  /**\n   * Get the average color from a array when 1 pixel is 4 bytes.\n   *\n   * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n   * @param {Object} [options]\n   * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n   * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n   * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n   * @param {number} [options.step=1]\n   *\n   * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n   */\n  getColorFromArray4(arr, options) {\n    options = options || {};\n    const bytesPerPixel = 4;\n    const arrLength = arr.length;\n    const defaultColor = getDefaultColor(options);\n    if (arrLength < bytesPerPixel) {\n      return defaultColor;\n    }\n    const len = arrLength - arrLength % bytesPerPixel;\n    const step = (options.step || 1) * bytesPerPixel;\n    let algorithm;\n    switch (options.algorithm || 'sqrt') {\n      case 'simple':\n        algorithm = simpleAlgorithm;\n        break;\n      case 'sqrt':\n        algorithm = sqrtAlgorithm;\n        break;\n      case 'dominant':\n        algorithm = dominantAlgorithm;\n        break;\n      default:\n        throw getError(`${options.algorithm} is unknown algorithm.`);\n    }\n    return algorithm(arr, len, {\n      defaultColor,\n      ignoredColor: prepareIgnoredColor(options.ignoredColor),\n      step\n    });\n  }\n\n  /**\n   * Get color data from value ([r, g, b, a]).\n   *\n   * @param {number[]} value\n   *\n   * @returns {FastAverageColorResult}\n   */\n  prepareResult(value) {\n    const rgb = value.slice(0, 3);\n    const rgba = [].concat(rgb, value[3] / 255);\n    const isDarkColor = isDark(value);\n    return {\n      value,\n      rgb: 'rgb(' + rgb.join(',') + ')',\n      rgba: 'rgba(' + rgba.join(',') + ')',\n      hex: arrayToHex(rgb),\n      hexa: arrayToHex(value),\n      isDark: isDarkColor,\n      isLight: !isDarkColor\n    };\n  }\n\n  /**\n   * Destroy the instance.\n   */\n  destroy() {\n    delete this._canvas;\n    delete this._ctx;\n  }\n  _bindImageEvents(resource, options) {\n    return new Promise((resolve, reject) => {\n      const onload = () => {\n        unbindEvents();\n        const result = this.getColor(resource, options);\n        if (result.error) {\n          reject(result.error);\n        } else {\n          resolve(result);\n        }\n      };\n      const onerror = () => {\n        unbindEvents();\n        reject(getError(`Error loading image \"${resource.src}\".`));\n      };\n      const onabort = () => {\n        unbindEvents();\n        reject(getError(`Image \"${resource.src}\" loading aborted.`));\n      };\n      const unbindEvents = () => {\n        resource.removeEventListener('load', onload);\n        resource.removeEventListener('error', onerror);\n        resource.removeEventListener('abort', onabort);\n      };\n      resource.addEventListener('load', onload);\n      resource.addEventListener('error', onerror);\n      resource.addEventListener('abort', onabort);\n    });\n  }\n}\n\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\nexport default FastAverageColor;","map":{"version":3,"names":["toHex","num","str","toString","length","arrayToHex","arr","map","join","isDark","color","result","prepareIgnoredColor","Array","isArray","slice","isIgnoredColor","data","index","ignoredColor","i","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","isIgnoredRGBAColorWithThreshold","inRange","colorComponent","ignoredColorComponent","value","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","dominantAlgorithm","len","options","colorHash","divider","step","max","red","green","blue","alpha","key","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","name","defaultValue","MIN_SIZE","MAX_SIZE","isSvg","filename","search","getOriginalSize","resource","HTMLImageElement","width","naturalWidth","height","naturalHeight","src","HTMLVideoElement","videoWidth","videoHeight","prepareSizeAndPosition","originalSize","srcLeft","srcTop","srcWidth","srcHeight","destWidth","destHeight","mode","factor","makeCanvas","window","OffscreenCanvas","document","createElement","ERROR_PREFIX","outputError","text","details","silent","console","error","getError","Error","FastAverageColor","getColorAsync","Promise","reject","img","Image","crossOrigin","_bindImageEvents","complete","getColor","resolve","prepareResult","size","_ctx","_canvas","getContext","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","e","bytesPerPixel","arrLength","algorithm","rgb","rgba","concat","isDarkColor","hex","hexa","isLight","destroy","onload","unbindEvents","onerror","onabort","removeEventListener","addEventListener"],"sources":["/Users/isaicarretomartinez/Documents/2024-portfolio/2024-web-portfolio/node_modules/fast-average-color/dist/index.esm.js"],"sourcesContent":["/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    const str = num.toString(16);\n\n    return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n\n    return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n    if (!color) { return color; }\n\n    if (Array.isArray(color)) {\n        return typeof color[0] === 'number' ? [color.slice()] : color;\n    }\n\n    return [color];\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (let i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        default:\n            return false;\n    }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    const redIgnored = ignoredColor[0];\n    const greenIgnored = ignoredColor[1];\n    const blueIgnored = ignoredColor[2];\n    const alphaIgnored = ignoredColor[3];\n    const threshold = ignoredColor[4];\n    const alphaData = data[index + 3];\n\n    const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    const colorHash = {};\n    const divider = 24;\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n    let max = [0, 0, 0, 0, 0];\n    \n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        const key = Math.round(red / divider) + ',' +\n                Math.round(green / divider) + ',' +\n                Math.round(blue / divider);\n\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        } else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        \n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n\n    const redTotal = max[0];\n    const greenTotal = max[1];\n    const blueTotal = max[2];\n\n    const alphaTotal = max[3];\n    const count = max[4];\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const alpha = arr[i + 3];\n        const red = arr[i] * alpha;\n        const green = arr[i + 1] * alpha;\n        const blue = arr[i + 2] * alpha;\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n    return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\n\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n    if (resource instanceof HTMLImageElement) {\n        let width = resource.naturalWidth;\n        let height = resource.naturalHeight;\n\n        // For SVG images with only viewBox attr.\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n\n        return {\n            width,\n            height,\n        };\n    }\n\n    if (resource instanceof HTMLVideoElement) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n    const srcLeft = getOption(options, 'left', 0);\n    const srcTop = getOption(options, 'top', 0);\n    const srcWidth = getOption(options, 'width', originalSize.width);\n    const srcHeight = getOption(options, 'height', originalSize.height);\n\n    let destWidth = srcWidth;\n    let destHeight = srcHeight;\n\n    if (options.mode === 'precision') {\n        return {\n            srcLeft,\n            srcTop,\n            srcWidth,\n            srcHeight,\n            destWidth,\n            destHeight\n        };\n    }\n\n    let factor;\n\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    } else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n\n    if (\n        destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE\n    ) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n\n    return {\n        srcLeft,\n        srcTop,\n        srcWidth,\n        srcHeight,\n        destWidth,\n        destHeight\n    };\n}\n\nfunction makeCanvas() {\n    return typeof window === 'undefined' ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nconst ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(options, text, details) {\n    if (!options.silent) {\n        console.error(ERROR_PREFIX + text);\n\n        if (details) {\n            console.error(details);\n        }\n    }\n}\n\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nclass FastAverageColor {\n    /**\n     * Get asynchronously the average color from not loaded image.\n     *\n     * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {Promise<FastAverageColorOptions>}\n     */\n    getColorAsync(resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n\n        if (typeof resource === 'string') {\n            const img = new Image();\n            img.crossOrigin = '';\n            img.src = resource;\n\n            return this._bindImageEvents(img, options);\n        } else if (resource instanceof Image && !resource.complete) {\n            return this._bindImageEvents(resource, options);\n        } else {\n            const result = this.getColor(resource, options);\n\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    }\n\n    /**\n     * Get the average color from images, videos and canvas.\n     *\n     * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {FastAverageColorResult}\n     */\n    getColor(resource, options) {\n        options = options || {};\n\n        const defaultColor = getDefaultColor(options);\n\n        if (!resource) {\n            outputError(options, 'call .getColor(null) without resource.');\n\n            return this.prepareResult(defaultColor);\n        }\n\n        const originalSize = getOriginalSize(resource);\n        const size = prepareSizeAndPosition(originalSize, options);\n\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n\n            return this.prepareResult(defaultColor);\n        }\n\n        if (!this._ctx) {\n            this._canvas = makeCanvas();\n            this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n\n            if (!this._ctx) {\n                outputError(options, 'Canvas Context 2D is not supported in this browser.');\n\n                return this.prepareResult(defaultColor);\n            }\n        }\n\n        this._canvas.width = size.destWidth;\n        this._canvas.height = size.destHeight;\n\n        let value = defaultColor;\n\n        try {\n            this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this._ctx.drawImage(\n                resource,\n                size.srcLeft, size.srcTop,\n                size.srcWidth, size.srcHeight,\n                0, 0,\n                size.destWidth, size.destHeight\n            );\n\n            const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        } catch (e) {\n            outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n        }\n\n        return this.prepareResult(value);\n    }\n\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     *\n     * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n     * @param {Object} [options]\n     * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n     * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n     * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n     * @param {number} [options.step=1]\n     *\n     * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n     */\n    getColorFromArray4(arr, options) {\n        options = options || {};\n\n        const bytesPerPixel = 4;\n        const arrLength = arr.length;\n        const defaultColor = getDefaultColor(options);\n\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n\n        const len = arrLength - arrLength % bytesPerPixel;\n        const step = (options.step || 1) * bytesPerPixel;\n\n        let algorithm;\n\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(`${options.algorithm} is unknown algorithm.`);\n        }\n\n        return algorithm(arr, len, {\n            defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step\n        });\n    }\n\n    /**\n     * Get color data from value ([r, g, b, a]).\n     *\n     * @param {number[]} value\n     *\n     * @returns {FastAverageColorResult}\n     */\n    prepareResult(value) {\n        const rgb = value.slice(0, 3);\n        const rgba = [].concat(rgb, value[3] / 255);\n        const isDarkColor = isDark(value);\n\n        return {\n            value,\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    }\n\n    /**\n     * Destroy the instance.\n     */\n    destroy() {\n        delete this._canvas;\n        delete this._ctx;\n    }\n\n    _bindImageEvents(resource, options) {\n        return new Promise((resolve, reject) => {\n            const onload = () => {\n                unbindEvents();\n\n                const result = this.getColor(resource, options);\n\n                if (result.error) {\n                    reject(result.error);\n                } else {\n                    resolve(result);\n                }\n            };\n\n            const onerror = () => {\n                unbindEvents();\n\n                reject(getError(`Error loading image \"${resource.src}\".`));\n            };\n\n            const onabort = () => {\n                unbindEvents();\n\n                reject(getError(`Image \"${resource.src}\" loading aborted.`));\n            };\n\n            const unbindEvents = () => {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    }\n}\n\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\nexport default FastAverageColor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}